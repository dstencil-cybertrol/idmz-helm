# Some values in this values.yaml file are able to be templated using other values. 
# The default values under global for example.
# loadBalancerIpAddress are able to be templated
# By default the loadBalancerIpAddress is set to
# "{{ .Values.global.loadBalancerIpAddress }}"
global:
  # These global values are used in various places throughout the values.yaml file. 
  # They can be overriden in the respective app's config, or can be set here.
  # They are currently used in the following places:
  # - duo.duoAdHost: '{{ .Values.global.baseDomain }}'
  # - duo.duoAdSearchDn: 'CN=Users,{{ .Values.global.ldapBaseDn }}'
  # - guacamole.ldapBindUser: CN=guacuser,CN=Users,{{ .Values.global.ldapDomain }}
  # - guacamole.properties: ldap-group-base-dn: {{ .Values.global.ldapBaseDn }}
  # - guacamole.properties: ldap-hostname: {{ .Values.global.ldapDomain }}
  # - guacamole.properties: ldap-search-bind-dn: CN={{ .Values.guacamole.ldapBindUser }},CN=Users,{{ .Values.global.ldapBaseDn }}
  # - guacamole.properties: ldap-user-base-dn: CN=Users,{{ .Values.global.ldapBaseDn }}
  # - guacamole.users.ldapBaseDn: '{{ .Values.global.ldapBaseDn }}'
  # - guacamole.users.autoConnections: domain: '{{ .Values.global.baseDomain }}'
  baseDomain: "" # testdomain.local
  ldapBaseDn: "" # DC=testdomain,DC=local
  publicBaseDomain: "" # testdomain.com
  # By default all services will share the global loadBalancerIpAddress.
  # This is configured under each service and can be overridden to use a 
  # dedicated ip address for each service.
  loadBalancerIpAddress: "" # i.e. 192.0.2.14

ingress:
  # ingress is used to serve http traffic to various backends.
  # It is used by guacamole, rdpgw (and authelia, used for the rdpgw.)
  # If ingress is disabled, the ingress service must be created externally.
  enabled: false
  loadBalancerIpAddress: "{{ .Values.global.loadBalancerIpAddress }}"
  # When using 'microk8s enable ingress' selector should be 'name: nginx-ingress-microk8s' if installing with helm then use 'app.kubernetes.io/name: ingress-nginx'
  selector: "app.kubernetes.io/name: ingress-nginx"

rwp:
  enabled: false
  # Note: If you are using a cluster-issuer, you should change the defaultAnnotations to 'cert-manager.io/cluster-issuer: {{ printf "%s-cert-manager" .Release.Name }}'
  defaultAnnotations: |
    kubernetes.io/ingress.class: public
    {{- if eq .Values.certManager.kind "ClusterIssuer" }}
    {{- if .Values.certManager.enabled }}
    cert-manager.io/cluster-issuer: {{ printf "%s-cert-manager" .Release.Name }}
    {{- else }}
    cert-manager.io/cluster-issuer: {{ .Values.certManager.name | quote }}
    {{- end }}
    {{- else if eq .Values.certManager.kind "Issuer" }}
    {{- if .Values.certManager.enabled }}
    cert-manager.io/issuer: {{ printf "%s-cert-manager" .Release.Name }}
    {{- else }}
    cert-manager.io/issuer: {{ .Values.certManager.name | quote }}
    {{- end }}
    {{- end }}
  rules: []
    ## Example Configuration:
    # - frontend: idmzk8s.demo.com
    #   backend:
    #     ips: 
    #       - 1.2.3.5
    #       - 1.2.3.6
    #     port: 16443
    #   overrideAnnotations: |
    #     kubernetes.io/ingress.class: public
    #     cert-manager.io/issuer: {{ printf "%s-cert-manager" .Release.Name }}
    #     nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    #     nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: "true"
    #     nginx.ingress.kubernetes.io/auth-tls-verify-client: "off"
    # - frontend: prodk8s.demo.com
    #   backend:
    #     ips: 
    #       - 1.2.3.4
    #     port: 16443
    #   overrideAnnotations: |
    #     kubernetes.io/ingress.class: public
    #     cert-manager.io/issuer: {{ printf "%s-cert-manager" .Release.Name }}
    #     nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    #     nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: "true"
    #     nginx.ingress.kubernetes.io/auth-tls-verify-client: "off"

certManager:
  # certManager (https://cert-manager.io/docs/) is required for tls certificates.
  # TLS certificates are used by the ingress controller that serves traffic for guac. 
  # TLS certs are also used by rdpgw and authelia if they are enabled.
  enabled: false
  # If cert-manager is disabled, ingress objects will use the name and kind to set the cert-manager.io/(cluster-)issuer annotation..
  # This is useful if you want to use a ClusterIssuer defined outside of the helm chart.
  name: cert-manager
  kind: ClusterIssuer
  secrets:
    dnsSecretAccessKey: ""
    acmeExternalAccountKey: ""
  email: ""
  # LetsEncrypt ACME staging is used by default. To use for production, change the url to:
  # https://acme-v02.api.letsencrypt.org/directory
  # For ZeroSSL, change the URL to https://acme.zerossl.com/v2/DV90
  acmeServer: https://acme-staging-v02.api.letsencrypt.org/directory
  acmeExternalAccountKeyId: ""
  # DNS providers currently supported include "route53" and "cloudflare".
  dnsProvider: route53
  route53Region: us-east-1
  route53HostedZoneId: ""
  route53AccessKeyId: ""

dhcpd:
  enabled: false
  image: alphabet5/dhcpd:latest
  restartPolicy: Always
  imagePullPolicy: Always
  loadBalancerIpAddress: "{{ .Values.global.loadBalancerIpAddress }}"
  cfg: |
    global-options: | #Optional, gets added before the subnet config.
      default-lease-time -1;
      max-lease-time -1;
      option domain-name-servers 192.168.1.1, 1.1.1.1;
      option domain-name "domain.com";
      next-server "192.168.1.250";
      option bootfile-name "tmboot64.bin";
    networks:
    # vlan: gateway/subnet
      2: 192.168.2.1/24
      3: 192.168.3.1/24
      4: 192.168.4.1/24
      5: 192.168.5.1/24
      6: 192.168.6.1/24
    clients: | #circuit-id,ip
      prsw01Gi1/0/2,192.168.2.12
      prsw01Gi1/0/3,192.168.3.13
      prsw01Gi1/0/4,192.168.4.14
      prsw01Gi1/0/5,192.168.5.15
      prsw01Gi1/0/6,192.168.6.16
      prsw02Gi1/0/2,192.168.2.22
      prsw02Gi1/0/3,192.168.3.23
      prsw02Gi1/0/4,192.168.4.24
      prsw02Gi1/0/5,192.168.5.25
      prsw02Gi1/0/6,192.168.6.26
    template: | #Optional. This replace the whole config template and can cause errors if it's not valid.
      stash-agent-options true;
      {% if global_options is not none +%}
      {{ global_options }}
      {% endif %}
        shared-network network {% raw %}{{% endraw %}
          {% for network in networks %}
          subnet {{ network['ip'] }} netmask {{ network['netmask'] }} {% raw %}{{% endraw %}
            option routers {{ network['gateway'] }};
            option subnet-mask {{ network['netmask'] }};
            option broadcast-address {{ network['broadcast'] }};
          {% raw %}}{% endraw %}
          {% endfor %}
          subnet 0.0.0.0 netmask 0.0.0.0 {} #this is required so dhcpd listens on the random-assigned docker interface address.
      {% raw %}}{% endraw %}
      {% for client in clients %}
      host {{ client['circuit_id_stripped'] }} {% raw %}{{% endraw %}
        host-identifier option agent.circuit-id "{{ client['circuit_id'] }}";
        fixed-address {{ client['ip'] }};
      {% raw %}}{% endraw %}
      {% endfor %}

squid:
  enabled: false
  image: alphabet5/squid:latest
  restartPolicy: Always
  imagePullPolicy: Always
  loadBalancerIpAddress: "{{ .Values.global.loadBalancerIpAddress }}"
  externalTrafficPolicy: Cluster
  squidPort: 3128
  # squid.whitelists will be mapped to files under /whitelists in the squid container.
  # These files can then be used within the squid.conf for building acls.
  whitelists:
    rockwell.txt: |
      .rockwellautomation.custhelp.com
      .rockwellautomation.com
    symantec.txt: |
      liveupdate.symantec.com
      liveupdate.symantecliveupdate.com
      ent-shasta.rrs.symantec.com
      tses.broadcom.com
      telemetry.broadcom.com
      ent-shasta-mr-clean.symantec.com
      central.ss.crsi.symantec.com
      central.nrsi.symantec.com
      central.avsi.symantec.com
      central.b6.crsi.symantec.com
      central.crsi.symantec.com
      stnd-avpg.crsi.symantec.com
      avs-avpg.crsi.symantec.com
      stnd-ipsg.crsi.symantec.com
      bash-avpg.crsi.symantec.com
      sp.cwfservice.net
      tus1gwynwapex01.symantec.com
      faults.qalabs.symantec.com
      faults.symantec.com
      linux-repo.us.securitycloud.symantec.com
    windows_updates.txt: |
      .windowsupdate.microsoft.com
      .update.microsoft.com
      .windowsupdate.com
      .download.windowsupdate.com
      download.microsoft.com
      wustat.windows.com
      ntservicepack.microsoft.com
      go.microsoft.com
      dl.delivery.mp.microsoft.com
    elastic.txt: |
      .elastic-cloud.com
      artifacts.elastic.co
    vmware.txt: |
      vapp-updates.vmware.com
      hostupdate.vmware.com
      vcsa.vmware.com
      www.vmware.com
    ubuntu.txt: |
      archive.ubuntu.com
      api.snapcraft.io
      .snapcraftcontent.com
    excluded.txt: |
      settings-win.data.microsoft.com
      ent-shasta-rrs.symantec.com
      update.googleapis.com
    kubernetes.txt: |
      k8s.gcr.io
      storage.googleapis.com
      docker.io
      registry-1.docker.io
      auth.docker.io
      www.docker.com
      cybertrol-engineering.github.io
      charts.jetstack.io
      bitnami-labs.github.io
      production.cloudflare.docker.com
      ghcr.io
      pkg-containers.githubusercontent.com
      github.com
      objects.githubusercontent.com
      .quay.io
      get.k3s.io
      cybertrolengineering.azurecr.io
      registry.k8s.io
      .blob.core.windows.net
      acme.zerossl.com
      route53.amazonaws.com      
    windows_activation: |
      activation.sls.microsoft.com/
      validation.sls.microsoft.com/
      activation-v2.sls.microsoft.com/
      crl.microsoft.com/pki/crl/products/MicProSecSerCA_2007-12-04.crl
      validation-v2.sls.microsoft.com/
      displaycatalog.mp.microsoft.com/
      licensing.mp.microsoft.com/
      purchase.mp.microsoft.com/
      displaycatalog.md.mp.microsoft.com/
      licensing.md.mp.microsoft.com/
      purchase.md.mp.microsoft.com/
  cfg: |
    #Setup logging
    logfile_rotate 0
    acl hasRequest has request
    acl excluded dstdomain "/whitelists/excluded.txt"
    access_log none !hasRequest
    access_log none excluded
    cache_log stdio:/dev/stdout
    access_log stdio:/dev/stdout
    cache_store_log stdio:/dev/stdout

    #Set allowed ports
    acl SSL_ports port 443
    acl Safe_ports port 80          # http
    acl Safe_ports port 443         # https
    acl CONNECT method CONNECT

    # Block anything that is not ports 80/443
    http_access deny !Safe_ports
    http_access deny CONNECT !SSL_ports

    #Disable caching
    cache deny all

    #Support email for failure page.
    cache_mgr support@testdomain.local

    #Set source clients
    acl test_src src all

    #Set port number
    http_port 3128

    #Allow All
    http_access allow all
    http_access allow CONNECT all

dnsmasq:
  enabled: false
  image: alphabet5/dnsmasq:latest
  restartPolicy: Always
  imagePullPolicy: Always
  loadBalancerIpAddress: "{{ .Values.global.loadBalancerIpAddress }}"
  # dnsmasq.args are extra arguments to pass to the dnsmasq service.
  # Example: --server=[/[<domain>]/[domain/]][<ipaddr>[#<port>]][@<interface>][@<source-ip>[#<port>]]
  # See the dnsmasq man page for more details.
  # The following example sets the default upstream server to 192.168.1.159
  # and the upstream server for requests to testdomain.local to 192.168.1.160. 
  args: []
    # Example:
    # - --server=192.168.1.159
    # - --server=/testdomain.local/192.168.1.160

smtp:
  enabled: false
  secrets:
    nextHopPassword: ""
  image: namshi/smtp:latest
  restartPolicy: Always
  imagePullPolicy: Always
  loadBalancerIpAddress: "{{ .Values.global.loadBalancerIpAddress }}"
  smtpPort: 25
  relayNetworks: 0.0.0.0/0
  type: gmail # gmail or smarthost
  gmailAddress: "" #test@gmail.com
  smartHostAddress: ""
  smartHostPort: ""
  smartHostUser: ""

duo:
  enabled: false
  debug: false
  secrets:
    duoAdPassword: ""
    duoApiHostname: ""
    duoIntegrationKey: ""
    duoRadiusSecret: ""
    duoSecretKey: ""
  image: alphabet5/duoauthproxy:latest
  restartPolicy: Always
  imagePullPolicy: Always
  loadBalancerIpAddress: "{{ .Values.global.loadBalancerIpAddress }}"
  duoAdHost: '{{ .Values.global.baseDomain }}'
  duoAdUser: DuoUser
  duoAdSearchDn: 'CN=Users,{{ .Values.global.ldapBaseDn }}'
  duoFailmode: secure

guacamole:
  enabled: false
  secrets:
    guacAdminPassword:
    mysqlPassword:
    mysqlRootPassword:
    ldapBindPassword:
  image: guacamole/guacamole:1.4.0
  restartPolicy: Always
  imagePullPolicy: IfNotPresent
  dnsName: "guacamole.{{ .Values.global.publicBaseDomain }}" # Example: guacamole.testdomain.com
  ldapBindUser: "CN=guacuser,CN=Users,{{ .Values.global.ldapBaseDn }}"
  debug: false
  properties: |
    enable-environment-properties: true
    ldap-encryption-method: none
    ldap-group-base-dn: {{ .Values.global.ldapBaseDn }}
    ldap-group-search-filter: (objectCategory=group)
    ldap-group-name-attribute: cn
    ldap-hostname: {{ .Values.global.baseDomain }}
    ldap-port: 389
    ldap-user-base-dn: CN=Users,{{ .Values.global.ldapBaseDn }}
    ldap-user-search-filter: (objectCategory=*)
    ldap-username-attribute: samAccountName
  guacd:
    image: guacamole/guacd:1.4.0
    restartPolicy: Always
    imagePullPolicy: Always
  init:
    image: alphabet5/guacamole:latest
    imagePullPolicy: Always
  sql:
    enabled: true
    image: mariadb:latest
    restartPolicy: Always
    imagePullPolicy: Always
    mysqlUser: guacuser
    usersDatabase: guacdb
  users:
    enabled: true
    image: alphabet5/guacamole-users:latest
    restartPolicy: Always
    imagePullPolicy: Always
    debug: false
    # If guacamole.users.autoConnectionDns is set to true, 
    # the dns name of the computer will be used. If it is 
    # set to false, the ip address (resolved using 
    # guacamole.users.autoConnectionDnsResolver) will be used.
    autoConnectionDns: true 
    autoConnectionDnsResolver: ""
    # guacamole.users.guacAdminGroups should be set to the group name that 
    # contains users that you would like to have admin access to guacamole.
    guacAdminGroups: "" 
    ldapBaseDn: '{{ .Values.global.ldapBaseDn }}'
    ldapComputerFilter: (objectCategory=Computer)
    ldapGroupNameFromConnNameRegex: '(.*?)\..+'
    ldapGroupNameMod: '{regex}-RDS'
    refreshSpeed: 300
    manualOnly: false
    # manualConnections: |
    #   manual_connections:
    #     defaults:
    #       connection:
    #         protocol: 'rdp'
    #       parameters:
    #         console-audio: 'true'
    #         create-drive-path: 'true'
    #         drive-name: 'shared'
    #         drive-path: '/shared'
    #         enable-drive: 'true'
    #         enable-printing: 'true'
    #         ignore-cert: 'true'
    #         port: '3389'
    #         printer-name: 'RemotePrinter'
    #         security: 'nla'
    #         username: '${GUAC_USERNAME}'
    #         password: '${GUAC_PASSWORD}'
    #         domain: '{{ .Values.global.baseDomain }}'
    #     connections:
    #      - defaults: true
    #        connection:
    #          connection_name: 'TEST-CONNECTION.domain.local - 192.168.1.160'
    #        parameters:
    #          hostname: '192.168.1.160'
    #   #parameters section and specific paramters are only required if they are not the defaults.
    #   # If manual connections are specified, permissions are required to be set for all manual connections.
    #   # List all ldap groups under the connection_name for each manual connection. Any user in the ldap group
    #   # will have permission to connect with the specific connection.
    #   manual_permissions:
    #     "Domain Users":
    #       - 'TEST-CONNECTION.domain.local - 192.168.1.160'
    #     ThisIsATestGroup:
    #       - 'TEST-CONNECTION.domain.local - 192.168.1.160'
    autoConnections: |
      connection:
        protocol: 'rdp'
      parameters: # Connection parameters are defined here under 'Configuring Connections': https://guacamole.apache.org/doc/gug/configuring-guacamole.html
        console-audio: 'true'
        create-drive-path: 'true'
        drive-name: 'shared'
        drive-path: '/shared'
        enable-drive: 'true'
        enable-printing: 'true'
        ignore-cert: 'true'
        port: '3389'
        printer-name: 'RemotePrinter'
        security: 'nla'
        username: '${GUAC_USERNAME}'
        password: '${GUAC_PASSWORD}'
        domain: '{{ .Values.global.baseDomain }}'
    
rdpgw:
  enabled: false
  image: alphabet5/rdpgw:latest
  replicas: 1
  restartPolicy: Always
  imagePullPolicy: Always
  secrets: # use 32 different sets of random characters for these.
    serverSessionKey:
    serverSessionEncryptionKey:
    openIdClientSecret:
    securityPaaTokenSigningKey:
    securityPaaTokenEncryptionKey:
  hosts: []
    # Example:
    # - host1.demo.com:3389
    # - 1.2.3.4:3389
  dnsName: "rdpgw.{{ .Values.global.publicBaseDomain }}" # rdpgw.domain.com
  config: |
    Server:
      # CertFile: /certs/tls.crt # Not used. TLS is configured with ingress.
      # KeyFile: /certs/tls.key # Not used. TLS is configured with ingress.
      # GatewayAddress: set via RDPGW_SERVER__GATEWAY_ADDRESS env.
      Port: 9443
      Hosts:
    {{- range .Values.rdpgw.hosts }}
        - {{ . }}
    {{- end }}
      RoundRobin: false
      # SessionKey: # Set via RDPGW_SERVER__SESSION_KEY env.
      # SessionEncryptionKey: # Set via RDPGW_SERVER__SESSION_ENCRYPTION_KEY env.
    Caps:
      SmartCardAuth: false
      TokenAuth: true
      IdleTimeout: 0 # connection timeout in minutes, 0 is limitless
      EnablePrinter: false
      EnablePort: false
      EnablePnp: false
      EnableDrive: false
      EnableClipboard: true
    OpenId:
      # ProviderUrl: set via env RDPGW_OPEN_ID__PROVIDER_URL
      ClientId: rdpgw
      #ClientSecret: # Set via RDPGW_OPEN_ID__CLIENT_SECRET env.
    Client:
      UsernameTemplate: "{{ "{{" }} username {{ "}}" }}@{{ .Values.global.baseDomain }}"
      # rdp file settings see: 
      # https://docs.microsoft.com/en-us/windows-server/remote/remote-desktop-services/clients/rdp-files
      NetworkAutoDetect: 0
      BandwidthAutoDetect: 1
      ConnectionType: 6
      # If true puts splits "user@testdomain.local" into the user and domain component so that
      # domain gets set in the rdp file and the domain name is stripped from the username
      SplitUserDomain: true
    Security:
      # a random string of at least 32 characters to secure cookies on the client
      # make sure to share this amongst different pods
      # PAATokenSigningKey: set via RDPGW_SECURITY__PAA_TOKEN_SIGNING_KEY env.
      # PAATokenEncryptionKey: set via RDPGW_SECURITY__PAA_TOKEN_ENCRYPTION_KEY env.
      # UserTokenEncryptionKey: "" Not used.
      # if you want to enable token generation for the user
      # if true the username will be set to a jwt with the username embedded into it
      EnableUserToken: false
      # Verifies if the ip used to connect to download the rdp file equals from where the connection is opened.
      VerifyClientIp: false 
authelia:
  enabled: false
  image: authelia/authelia:latest
  replicas: 1
  restartPolicy: Always
  imagePullPolicy: Always
  dnsName: "auth.{{ .Values.global.publicBaseDomain }}" # example: auth.domain.com
  secrets:
    jwtSecret: "" # Random 32 characters.
    storageEncryptionKey: "" # Random 64 characters.
    backendLdapPassword: "" # # Password for the ldap backend.
    issuer: "" # pem encoded secret `docker run -u "$(id -u):$(id -g)" -v "$(pwd)":/keys authelia/authelia:latest authelia crypto pair rsa generate --bits 4096 --directory /keys` (Note: this command might change, and up to date documentation can be found here: https://www.authelia.com/configuration/miscellaneous/guides/#generating-an-rsa-keypair)
    hmac: "" # random string that gets hashed with sha256 to sign the jwt.
    redis: "" # Password for redis connection. Not used if blank.
    session: "" # Required if redis is used. Random 64 an charaters.
  ldapUrl: "ldap://{{ .Values.global.baseDomain }}"
  ldapBaseDn: "{{ .Values.global.ldapBaseDn }}"
  ldapUser: "CN=autheliaUser,CN=Users,{{ .Values.global.ldapBaseDn }}" # CN=username,CN=Users,DC=domain,DC=com
  # rdpgwInit merges secrets used in RDPGW into the authelia config. $RDPGW_OPEN_ID_DNS_NAME, $RDPGW_OPEN_ID__CLIENT_SECRET, and $RDPGW_OPEN_ID_SESSION_DOMAIN
  rdpgwInit: true
  config: |
    theme: dark

    server:
      host: 0.0.0.0
      port: 9091

    log:
      level: debug

    authentication_backend:
      password_reset:
        disable: true
      refresh_interval: 5m
      ldap:
        implementation: custom
        # url: configured via env
        # base_dn: configured via env
        username_attribute: sAMAccountName
        users_filter: (&({username_attribute}={input})(objectCategory=user))
        groups_filter: (&(member={dn})(objectClass=group)(objectCategory=group))
        mail_attribute: mail
        display_name_attribute: displayName
        # user: configured via env
    identity_providers:
      oidc:
        access_token_lifespan: 1h
        authorize_code_lifespan: 1m
        id_token_lifespan: 1h
        refresh_token_lifespan: 90m
        enable_client_debug_messages: false
        enforce_pkce: public_clients_only
        clients:
          - id: rdpgw
            description: Remote Desktop Gateway
            secret: $RDPGW_OPEN_ID__CLIENT_SECRET
            public: false
            authorization_policy: one_factor
            pre_configured_consent_duration: '99y'
            audience: []
            scopes: 
              - email
              - profile
            redirect_uris:
              - https://$RDPGW_OPEN_ID_DNS_NAME/callback
            grant_types:
              - refresh_token
              - authorization_code
            response_types:
              - code
            response_modes:
              - form_post
              - query
              - fragment
            userinfo_signing_algorithm: none
    
    session:
      domain: $RDPGW_OPEN_ID_SESSION_DOMAIN
      expiration: 1h
      inactivity: 20m
      remember_me_duration: 1h
    
    regulation:
      max_retries: 30
      find_time: 2m
      ban_time: 2m
    
    storage:
      local:
        path: /config/db.sqlite3

    access_control:
      rules:
      - domain: $RDPGW_OPEN_ID_DNS_NAME
        policy: one_factor

    notifier:
      disable_startup_check: true
      filesystem:
        filename: /config/notification.txt
